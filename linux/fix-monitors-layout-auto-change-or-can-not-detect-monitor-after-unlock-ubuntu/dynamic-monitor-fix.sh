#!/bin/bash

# Dynamic Monitor Fix Script for Multi-Monitor Setup
# This script automatically detects connected monitors and configures them
# Auto-generated by monitor-fix-setup.sh

# Create log directory
mkdir -p "$HOME/.local/share"

# Function to log with timestamp
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S'): $1" >> "$HOME/.local/share/monitor-fix.log"
}

# Function to restore monitor layout dynamically
restore_monitors() {
    log_message "Screen unlocked, detecting and restoring monitor layout..."
    
    # Wait for desktop to stabilize
    sleep 2
    
    # Get currently connected monitors
    CONNECTED_MONITORS=$(xrandr --query | grep " connected" | awk '{print $1}')
    
    if [ -z "$CONNECTED_MONITORS" ]; then
        log_message "No monitors detected"
        return
    fi
    
    log_message "Connected monitors: $(echo $CONNECTED_MONITORS | tr '\n' ' ')"
    
    # Build xrandr command dynamically based on what's connected
    XRANDR_CMD="xrandr"
    POS_X=0
    PRIMARY_SET=false
    
    # Your preferred monitor priority and configurations
    for monitor in DP-4 DP-1 HDMI-0; do
        if echo "$CONNECTED_MONITORS" | grep -q "^$monitor$"; then
            case $monitor in
                "DP-4")
                    if [ "$PRIMARY_SET" = false ]; then
                        XRANDR_CMD="$XRANDR_CMD --output $monitor --primary --mode 2560x1600 --pos 0x0"
                        POS_X=2560
                        PRIMARY_SET=true
                        log_message "Configured $monitor as primary at 0x0"
                    else
                        XRANDR_CMD="$XRANDR_CMD --output $monitor --mode 2560x1600 --pos ${POS_X}x0"
                        POS_X=$((POS_X + 2560))
                        log_message "Configured $monitor at ${POS_X}x0"
                    fi
                    ;;
                "DP-1"|"HDMI-0")
                    if [ "$PRIMARY_SET" = false ]; then
                        XRANDR_CMD="$XRANDR_CMD --output $monitor --primary --mode 1920x1080 --pos ${POS_X}x0"
                        PRIMARY_SET=true
                    else
                        XRANDR_CMD="$XRANDR_CMD --output $monitor --mode 1920x1080 --pos ${POS_X}x0"
                    fi
                    POS_X=$((POS_X + 1920))
                    log_message "Configured $monitor at ${POS_X}x0"
                    ;;
            esac
        fi
    done
    
    # Execute the command
    log_message "Executing: $XRANDR_CMD"
    if eval "$XRANDR_CMD"; then
        log_message "Monitor layout restored successfully"
    else
        log_message "Failed to restore monitor layout"
    fi
}

# Main monitoring loop with improved D-Bus parsing
log_message "Dynamic monitor fix service started"

unlock_detected=false

dbus-monitor --session "type='signal',interface='org.gnome.ScreenSaver'" 2>/dev/null | \
while read -r line; do
    # Check if this line contains ActiveChanged
    if echo "$line" | grep -q "member=ActiveChanged"; then
        unlock_detected=true
    fi
    
    # Check if this line contains boolean false and we previously detected ActiveChanged
    if [[ "$unlock_detected" == "true" ]] && echo "$line" | grep -q "boolean false"; then
        restore_monitors
        # Reset the flag
        unlock_detected=false
    fi
    
    # Reset flag if we see a different signal
    if echo "$line" | grep -q "member=" && ! echo "$line" | grep -q "member=ActiveChanged"; then
        unlock_detected=false
    fi
done